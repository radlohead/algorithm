// 문제
// 벡터는 방향과 크기의 의미를 모두 표현하는 단위이며 계산 기하의 가장 기초적인 도구가 됩니다.
// 벡터를 가장 직관적으로 그릴 수 있는 방법은 화살표인데, 벡터의 시작점을 바꾸어도 벡터는 변하지 않습니다.
// 이러한 벡터의 특성을 이용하여 프로그래밍을 할 때는 벡터를 원점으로부터 화살표 끝점의 위치(x, y)로 표현할 수 있습니다.
// 벡터의 가장 기본적인 연산인 덧셈과 뺄셈이 올바르게 출력되도록 프로그램을 작성하세요.
// 입력 첫 줄에 벡터 A의 끝점의 위치 ( x, y ) 다음 줄에 벡터 B의 끝점의 위치 ( x, y )
// 마지막 줄에 '+' 또는 '-' 입력 * x, y 는 -1000 이상 1000 이하의 정수로 주어집니다.
// 출력 알맞게 '+' 또는 '-' 연산을 한 결과 ( 소수점 두번째 자리까지 출력할 것 )

// 입력 3 5 3 9 +
// 출력 6.00 14.00

// 입력 1 2 3 4 -
// 출력 -2.00 -2.00

const app = (x, y, op) => {
    const result = []

    switch (op) {
        case '+':
            result.push(x[0] + y[0])
            result.push(x[1] + y[1])
            break
        case '-':
            result.push(x[0] - y[0])
            result.push(x[1] - y[1])
            break
    }
    return result.map(v => v.toFixed(2))
}
app([3, 5], [3, 9], '+')
app([1, 2], [3, 4], '-')
